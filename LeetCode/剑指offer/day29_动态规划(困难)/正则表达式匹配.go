//题目链接：https://leetcode.cn/problems/zheng-ze-biao-da-shi-pi-pei-lcof/?envType=study-plan&id=lcof
package main

//本题解参考自LeetCode官方题解

//题目中的匹配是一个「逐步匹配」的过程：我们每次从字符串 p 中取出一个字符或者「字符 + 星号」的组合，
//并在 s 中进行匹配。对于 p 中一个字符而言，它只能在 s 中匹配一个字符，匹配的方法具有唯一性；而对于 p 中字符 + 星号的组合而言，
//它可以在 s 中匹配任意自然数个字符，并不具有唯一性。因此我们可以考虑使用动态规划，对匹配的方案进行枚举。
//
//我们用 dp[i][j] 表示 s 的前 i 个字符与 p 中的前 j 个字符是否能够匹配。在进行状态转移时，我们考虑 p 的第 j 个字符的匹配情况：
//如果 p 的第 j 个字符是一个小写字母，那么我们必须在 s 中匹配一个相同的小写字母
//	如果 s 的第 i 个字符与 p 的第 j 个字符不相同，那么无法进行匹配；
//	否则我们可以匹配两个字符串的最后一个字符，完整的匹配结果取决于两个字符串前面的部分，dp[i][j] =dp[i-1][j-1]
//
//若 p 的第 j 个字符为 ‘*’，我们可以对 p 的第 j-1 个字符匹配任意次，匹配 0 次的情况下，有 dp[i][j] = dp[i][j-2]，
//在匹配 s中字符 1、2 次的情况下，有 dp[i][j] = dp[i-1][j-2]、dp[i][j]= dp[i-2][j-2]，
//如果用这种方式进行转移，那么我们就需要枚举这个组合到底匹配了 s 中的几个字符，会增导致时间复杂度增加，并且代码编写起来十分麻烦。
//我们不妨换个角度考虑这个问题：字母 + 星号的组合在匹配的过程中，本质上只会有两种情况：
//- 匹配 s 末尾的一个字符，将该字符扔掉，而该组合还可以继续进行匹配；
//- 不匹配字符，将该组合扔掉，不再进行匹配。
//
//最终的状态转移方程如下：
//- if p[j]!='*' && match(i,j)，dp\[i\]\[j\] = dp\[i-1\]\[j-1\]
//- if p[j]!='*' && !match(i,j)，dp\[i\]\[j\] = false
//- if p[j] == '*' && match(i,j-1)，dp\[i\]\[j\] = dp\[i\]\[j-2\]
//- if p[j] == '*' && !match(i,j-1)，dp\[i\]\[j\] = dp\[i-1\]\[j\] || dp\[i\]\[j-2\]
//其中，match(i,j) 是判断 s[i-1] 与 p[j-1] 是否匹配的辅助函数.

//字符串的字符下标是从 0 开始的，因此在实现上面的状态转移方程时，需要注意状态中每一维下标与实际字符下标的对应关系。

func isMatch(s string, p string) bool {
	m,n := len(s),len(p)
	dp := make([][]bool,m+1)
	for i:=0;i<=m;i++{
		dp[i] = make([]bool,n+1)
	}
	// 状态初始化，模式和正则表达式均为空时，匹配成功
	dp[0][0] = true
	// match 用于匹配单个字符
	// s[i-1] 与 p[j-1] 是否匹配成功
	match := func(i,j int) bool {
		if i == 0{
			return false
		}
		if p[j-1] == '.'{
			return true
		}
		return s[i-1] == p[j-1]
	}
	// i 从 0，j 从 1 开始遍历
	// 因为当s不为空，而p为空的时候，匹配一定失败
	for i:=0;i<=m;i++{
		for j:=1;j<=n;j++{
			// 对应正则为 字符+* 组合
			if p[j-1] == '*'{
				dp[i][j] = dp[i][j-2]
				if match(i,j-1){
					dp[i][j] = dp[i][j] || dp[i-1][j]
				}
			} else {
				// 对应 正则为单个字符 的情况
				if match(i,j){
					dp[i][j] = dp[i-1][j-1]
				}
			}
		}
	}
	return dp[m][n]
}